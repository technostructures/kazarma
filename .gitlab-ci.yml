# SPDX-FileCopyrightText: 2020-2024 The Kazarma Team
# SPDX-License-Identifier: AGPL-3.0-only

stages:
  - setup
  - deploy_staging
  - analysis
  - deploy_production
  - docs

image: elixir:1.17-otp-27-alpine

cache: &global_cache
  key: cache-test
  when: always
  policy: pull
  paths:
    - _build
    - deps

variables:
  MIX_ENV: test
  GIT_SUBMODULE_STRATEGY: recursive

### setup

.prepare:
  stage: setup
  interruptible: true
  script:
    - apk update
    - apk add git cmake g++
    - mix local.hex --force
    - mix local.rebar --force
    - mix deps.get
    - mix compile

prepare_test:
  extends: .prepare
  cache:
    <<: *global_cache
    policy: pull-push

build_plt:
  stage: setup
  interruptible: true
  rules:
    - changes:
        - matrix_app_service
        - activity_pub
        - polyjuice_client
      if: '$CI_PIPELINE_SOURCE != "merge_request_event"'
  script:
    - apk update
    - apk add git cmake g++
    - mix local.hex --force
    - mix local.rebar --force
    - mix deps.get
    - mix compile
    - mix dialyzer.clean
    - mix dialyzer.build
  cache:
    <<: *global_cache
    policy: pull-push

prepare_dev:
  extends: .prepare
  only:
    - main
  variables:
    MIX_ENV: dev
  cache:
    <<: *global_cache
    policy: pull-push
    key: cache-dev

.docker:
  stage: setup
  image: ezkrg/buildx:v0.11.2
  services:
    - name: docker:dind
      command: ["dockerd", "--host=tcp://0.0.0.0:2375"]
      alias: 'docker'
  variables:
    - DOCKER_DRIVER: overlay2
    - DOCKER_HOST: tcp://docker:2375/
    - DOCKER_BUILDKIT: 1
  before_script:
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

.docker_tag:
  extends: .docker
  needs:
    - build_docker_image
  script:
    - docker pull $IMAGE_TAG
    - docker tag $IMAGE_TAG $IMAGE_NEW_TAG
    - docker push $IMAGE_NEW_TAG
  variables:
    GIT_STRATEGY: none

build_docker_image:
  extends: .docker
  interruptible: true
  before_script:
    - docker buildx create --driver=docker-container --name=buildkit-builder --use
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - echo $IMAGE_TAG
    - >
      docker buildx build
      -f Dockerfile.prod
      --pull
      --build-arg VCS_REF=$CI_COMMIT_SHA
      --build-arg VCS_URL=$CI_PROJECT_URL
      --tag $IMAGE_TAG
      --cache-from type=registry,ref=$CI_REGISTRY_IMAGE:cache
      --cache-to type=registry,ref=$CI_REGISTRY_IMAGE:cache,mode=max
      --push
      .

tag_image_latest:
  extends: .docker_tag
  only:
    refs:
      - main
  variables:
    IMAGE_NEW_TAG: $CI_REGISTRY_IMAGE:latest

tag_image_branches:
  extends: .docker_tag
  only:
    refs:
      - branches
  variables:
    IMAGE_NEW_TAG: $CI_REGISTRY_IMAGE:CI_COMMIT_REF_NAME

tag_image_prerelease:
  extends: .docker
  rules:
    - if: $CI_COMMIT_TAG =~ /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  needs:
    - build_docker_image
  script:
    - docker pull $IMAGE_TAG
    - |
      export PRERELEASE_TAG=$CI_REGISTRY_IMAGE:$(echo $CI_COMMIT_TAG | sed 's/^v//')
      docker tag $IMAGE_TAG $PRERELEASE_TAG
    - docker push --all-tags $CI_REGISTRY_IMAGE
  variables:
    GIT_STRATEGY: none

tag_image_release:
  extends: .docker
  rules:
    - if: $CI_COMMIT_TAG =~ /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
  needs:
    - build_docker_image
  script:
    - docker pull $IMAGE_TAG
    - |
      export PATCH_TAG=$CI_REGISTRY_IMAGE:$(echo $CI_COMMIT_TAG | sed -E 's/^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/\1\.\2\.\3/')
      docker tag $IMAGE_TAG $PATCH_TAG
    - |
      export MINOR_TAG=$CI_REGISTRY_IMAGE:$(echo $CI_COMMIT_TAG | sed -E 's/^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/\1\.\2/')
      docker tag $IMAGE_TAG $MINOR_TAG
    - |
      export MAJOR_TAG=$CI_REGISTRY_IMAGE:$(echo $CI_COMMIT_TAG | sed -E 's/^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/\1/')
      docker tag $IMAGE_TAG $MAJOR_TAG
    - docker push --all-tags $CI_REGISTRY_IMAGE
  variables:
    GIT_STRATEGY: none

### deploy_staging

deploy_staging:
  stage: deploy_staging
  needs:
    - build_docker_image
  when: manual
  environment:
    name: "staging"
    url: "https://staging.kazar.ma"
  variables:
    KAZARMA_TAG: $CI_COMMIT_SHA
  image: dwdraju/alpine-curl-jq
  # amazing hack from
  # https://gitlab.com/davebarr/multi-pipeline-project-1/-/blob/100f7dbfb881b5ae5e87d8d89407c0970f1bcd42/.gitlab-ci.yml
  script:
    - iid=$(curl -X POST -F "token=$CI_JOB_TOKEN" -F ref=main -F "variables[ENV]=staging" -F "variables[KAZARMA_TAG]=$CI_COMMIT_SHA" "https://gitlab.com/api/v4/projects/36494803/trigger/pipeline" | jq -r .id)
    - >
      curl -X GET -H "PRIVATE-TOKEN: $API_TOKEN" "https://gitlab.com/api/v4/projects/36494803/pipelines/$iid"
    - exit 0
    # unfortunately it doesn't seem to work without a user or group token?
    # - |
    #   while true; do
    #     pipeline_status=$(curl -X GET -H "PRIVATE-TOKEN: $API_TOKEN" "https://gitlab.com/api/v4/projects/36494803/pipelines/$iid" | jq -r .status)
    #     echo $pipeline_status
    #     case "$pipeline_status" in
    #       success)
    #         exit 0
    #       ;;
    #       canceled | failed | skipped | manual | scheduled)
    #         exit 1
    #       ;;
    #     esac
    #     sleep 5
    #   done


### analysis

.analysis:
  stage: analysis
  interruptible: true

.mix:
  before_script:
    - apk update
    - apk add git cmake g++
    - mix local.hex --force
    - mix deps.get
    - mix compile

test:
  extends: .analysis
  needs:
    - prepare_test
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: kazarma_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_HOST: postgres
    POSTGRES_HOST_AUTH_METHOD: trust
    MIX_ENV: test
  before_script:
    - apk update
    - apk add git cmake g++
    - mix local.hex --force
    - mix deps.get
    - mix compile
    - mix ecto.create
    - mix ecto.migrate
  script:
    - mix coveralls.cobertura
  coverage: '/\[TOTAL\]\s+(\d+\.\d+)%/'
  artifacts:
    when: always
    reports:
      junit: _build/test/lib/kazarma/test-junit-report.xml
      coverage_report:
        coverage_format: cobertura
        path: cover/cobertura.xml

format:
  extends:
    - .analysis
    - .mix
  needs:
    - prepare_test
  script:
    - mix format --check-formatted

credo:
  extends:
    - .analysis
    - .mix
  needs:
    - prepare_test
  script:
    - mix credo suggest | tee credo.log
  artifacts:
    when: always
    paths:
      - "credo.log"

dialyzer:
  extends:
    - .analysis
    - .mix
  needs:
    - job: prepare_test
    - job: build_plt
      optional: true
  script:
    - mix dialyzer
  cache: 
    <<: *global_cache
    policy: pull-push
    paths:
      - _build
      - deps
      - priv/plts

reuse:
  extends: .analysis
  needs: []
  image:
    name: fsfe/reuse:latest
    entrypoint: [""]
  script:
    - reuse lint

### docs

pages:
  extends: .mix
  stage: docs
  only:
    - main
  needs:
    - prepare_dev
  variables:
    MIX_ENV: dev
  interruptible: true
  script:
    - mix docs -o public
  cache:
    <<: *global_cache
    key: cache-dev
  artifacts:
    paths:
      - public
