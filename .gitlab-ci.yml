# SPDX-FileCopyrightText: 2020-2021 The Kazarma Team
# SPDX-License-Identifier: AGPL-3.0-only

stages:
  - setup
  - deploy_staging
  - analysis
  - deploy_production
  - docs

image: bitwalker/alpine-elixir:1.11

cache: &global_cache
  key: cache-test
  when: always
  policy: pull
  paths:
    - _build
    - deps

variables:
  MIX_ENV: test
  GIT_SUBMODULE_STRATEGY: recursive

### setup

.prepare:
  stage: setup
  interruptible: true
  script:
    - mix deps.get
    - mix compile

prepare_test:
  extends: .prepare
  cache:
    <<: *global_cache
    policy: pull-push

prepare_dev:
  extends: .prepare
  only:
    - master
  variables:
    MIX_ENV: dev
  cache:
    <<: *global_cache
    policy: pull-push
    key: cache-dev

.docker:
  stage: setup
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  interruptible: true
  before_script:
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE/production:$CI_COMMIT_SHA

.docker_tag:
  extends: .docker
  needs:
    - build_docker_image
  script:
    - docker pull $IMAGE_TAG
    - docker tag $IMAGE_TAG $IMAGE_NEW_TAG
    - docker push $IMAGE_NEW_TAG
  variables:
    GIT_STRATEGY: none

build_docker_image:
  extends: .docker
  script:
    - docker pull $CI_REGISTRY_IMAGE/production:latest || true
    - >
      docker build
      -f Dockerfile.prod
      --pull
      --build-arg VCS_REF=$CI_COMMIT_SHA
      --build-arg VCS_URL=$CI_PROJECT_URL
      --cache-from $CI_REGISTRY_IMAGE:latest
      --tag $IMAGE_TAG
      .
    - docker push $IMAGE_TAG

tag_latest_docker_image:
  extends: .docker_tag
  only:
    refs:
      - master
  variables:
    IMAGE_NEW_TAG: $CI_REGISTRY_IMAGE/production:latest

Tag tagged prod image:
  extends: .docker_tag
  only:
    refs:
      - tags
      - branches
  variables:
    IMAGE_NEW_TAG: $CI_REGISTRY_IMAGE/production:CI_COMMIT_REF_NAME

### deploy_staging

.staging:
  image: tmaier/docker-compose:latest
  variables:
    DOCKER_HOST: "ssh://ci@staging.kazar.ma"
  environment:
    name: staging
    url: https://staging.kazar.ma
  before_script:
    - apk add git gnupg
    - apk add git-secret --repository=http://dl-cdn.alpinelinux.org/alpine/edge/testing
    - gpg --import $STAGING_GPG_PRIVATE_KEY
    - git secret reveal
    - eval `ssh-agent -s` > /dev/null
    - chmod 600 $STAGING_SSH_PRIVATE_KEY
    - ssh-add $STAGING_SSH_PRIVATE_KEY
    - mkdir -p /root/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > /root/.ssh/config
    - alias docker-compose='docker-compose -f docker-compose.staging.yml'

deploy_staging:
  extends: .staging
  stage: deploy_staging
  needs:
    - build_docker_image
  when: manual
  variables:
    KAZARMA_VERSION: $CI_COMMIT_SHA
  script:
    - docker-compose pull kazarma
    - docker-compose up -d kazarma
    - docker-compose run kazarma eval "Kazarma.Release.migrate()"

### analysis

.analysis:
  stage: analysis
  interruptible: true

test:
  extends: .analysis
  needs:
    - prepare_test
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: kazarma_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_HOST: postgres
    POSTGRES_HOST_AUTH_METHOD: trust
    MIX_ENV: test
  before_script:
    - mix ecto.create
    - mix ecto.migrate
  script:
    - mix test --cover
  artifacts:
    when: always
    paths:
      - cover
    reports:
      junit: _build/test/lib/kazarma/test-junit-report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

format:
  extends: .analysis
  needs:
    - prepare_test
  script:
    - mix format --check-formatted

credo:
  extends: .analysis
  needs:
    - prepare_test
  script:
    - mix credo suggest --only readability | tee credo.log
  artifacts:
    when: always
    paths:
      - "credo.log"

dialyzer:
  extends: .analysis
  needs:
    - prepare_test
  script:
    - mix dialyzer
  cache: 
    <<: *global_cache
    policy: pull-push
    paths:
      - _build
      - deps
      - priv/plts

reuse:
  extends: .analysis
  needs: []
  image:
    name: fsfe/reuse:latest
    entrypoint: [""]
  script:
    - reuse lint

### docs

pages:
  stage: docs
  only:
    - master
  needs:
    - prepare_dev
  variables:
    MIX_ENV: dev
  interruptible: true
  script:
    - mix docs -o public
  cache:
    <<: *global_cache
    key: cache-dev
  artifacts:
    paths:
      - public
