# SPDX-FileCopyrightText: 2020-2021 The Kazarma Team
# SPDX-License-Identifier: AGPL-3.0-only

version: '3.7'

volumes:
  kazarma_deps:
  kazarma_node_deps:
  kazarma_build_files:
  postgres_kazarma_files:
  postgres_commonspub_files:
  postgres_pleroma_files:
  postgres_synapse_files:
  postgres_dendrite_files:
  synapse_files:
  pleroma_uploads:

services:
  
  kazarma:
    build: .
    # hostname: kazarma.kazarma.local
    # ports:
    #   - "4000:4000"
    volumes:
      - ./:/opt/app:rw
      - kazarma_deps:/opt/app/deps
        # - kazarma_node_deps:/opt/app/assets/node_modules
      - kazarma_build_files:/opt/app/_build
    depends_on:
      - postgres_kazarma
    labels:
      - traefik.enable=true
      - traefik.http.services.kazarma.loadbalancer.server.port=4000
      - traefik.http.routers.kazarma.entryPoints=http
      - traefik.http.routers.kazarma.rule=Host(`kazarma.kazarma.local`)
      # - traefik.http.routers.kazarma.middlewares=https_redirect
      - traefik.http.routers.kazarmas.entryPoints=https
      - traefik.http.routers.kazarmas.rule=Host(`kazarma.kazarma.local`)
      - traefik.http.routers.kazarmas.tls=true
    environment:
      - AP_BASE_PATH=/
      - POSTGRES_HOST=postgres_kazarma
      - POSTGRES_USER=kazarma
      - POSTGRES_DB=kazarma
      - POSTGRES_PASSWORD=postgres

  synapse:
    image: matrixdotorg/synapse:v1.52.0
    # domainname: matrix.local
    # Since synapse does not retry to connect to the database, restart upon
    # failure
    restart: unless-stopped
    # Need to do it via YAML
    labels:
      - traefik.enable=true
      - traefik.http.services.matrix.loadbalancer.server.port=8008
      - traefik.http.routers.matrix.entryPoints=http
      - traefik.http.routers.matrix.rule=Host(`matrix.kazarma.local`)
      # - traefik.http.routers.matrix.middlewares=https_redirect
      - traefik.http.routers.matrixs.entryPoints=https
      - traefik.http.routers.matrixs.rule=Host(`matrix.kazarma.local`)
      - traefik.http.routers.matrixs.tls=true
    environment:
      - SYNAPSE_SERVER_NAME=kazarma.local
      - SYNAPSE_REPORT_STATS=no
      - SYNAPSE_ENABLE_REGISTRATION=yes
      - SYNAPSE_LOG_LEVEL=INFO
      # - SYNAPSE_LOG_LEVEL=DEBUG
      # - POSTGRES_HOST=postgres_synapse
      # - POSTGRES_USER=synapse
      # - POSTGRES_PASSWORD=postgres
    volumes:
      - synapse_files:/data
      - ./infra/dev/synapse/homeserver.yaml:/data/homeserver.yaml
      - ./infra/dev/synapse/kazarma.yaml:/data/appservices/kazarma.yaml
      - ./infra/dev/synapse/log.config:/data/log.config
    # depends_on:
    #   - postgres_synapse
    # ports:
    #   - 8008:8008/tcp

  # dendrite:
  #   image: matrixdotorg/dendrite-monolith:latest
  #   command: [
  #     "--tls-cert=server.crt",
  #     "--tls-key=server.key"
  #   ]
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.services.matrix.loadbalancer.server.port=8008
  #     - traefik.http.routers.matrix.entryPoints=http
  #     - traefik.http.routers.matrix.rule=Host(`matrix.kazarma.local`)
  #     # - traefik.http.routers.matrix.middlewares=https_redirect
  #     - traefik.http.routers.matrixs.entryPoints=https
  #     - traefik.http.routers.matrixs.rule=Host(`matrix.kazarma.local`)
  #     - traefik.http.routers.matrixs.tls=true
  #   # ports:
  #   #   - 8008:8008
  #   #   - 8448:8448
  #   volumes:
  #     - ./infra/dev/dendrite:/etc/dendrite
  #   depends_on:
  #     - postgres_dendrite

  # postgres_dendrite:
  #   image: postgres:11
  #   restart: always
  #   labels:
  #     - traefik.enable=false
  #   volumes:
  #     - ./infra/dev/dendrite/create_db.sh:/docker-entrypoint-initdb.d/20-create_db.sh
  #     - postgres_dendrite_files:/var/lib/postgresql/data
  #   environment:
  #     POSTGRES_PASSWORD: itsasecret
  #     POSTGRES_USER: dendrite

  delegation:
    image: nginx:1.19
    hostname: kazarma.local
    volumes:
      - ./infra/dev/delegation/matrix:/usr/share/nginx/html/.well-known/matrix:ro
      - ./infra/dev/delegation/host-meta:/usr/share/nginx/html/.well-known/host-meta:ro
    labels:
      - traefik.enable=true
      - traefik.http.services.delegation.loadbalancer.server.port=80
      - traefik.http.routers.delegation.entryPoints=http
      - traefik.http.routers.delegation.rule=Host(`kazarma.local`)
      # - traefik.http.routers.delegation.middlewares=https_redirect
      - traefik.http.routers.delegations.entryPoints=https
      - traefik.http.routers.delegations.rule=Host(`kazarma.local`)
      - traefik.http.routers.delegations.tls=true

  element:
    image: vectorim/element-web:v1.11.0
    labels:
      - traefik.enable=true
      - traefik.http.services.element.loadbalancer.server.port=80
      - traefik.http.routers.element.entryPoints=http
      - traefik.http.routers.element.rule=Host(`element.local`)
      # - traefik.http.routers.elements.middlewares=https_redirect
      - traefik.http.routers.elements.entryPoints=https
      - traefik.http.routers.elements.rule=Host(`element.local`)
      - traefik.http.routers.elements.tls=true
    volumes:
      - ./infra/dev/element/config.json:/app/config.json

  pleroma:
    environment:
    - DOMAIN=pleroma.local
    - DB_HOST=postgres_pleroma
    - DB_PASS=postgres
    image: epenguincom/pleroma:2.4.2
    # build: ./pleroma/
    init: true
    healthcheck: 
      test: "true"
    labels:
      - traefik.enable=true
      - traefik.http.services.pleroma.loadbalancer.server.port=4000
      - traefik.http.routers.pleroma.entryPoints=http
      - traefik.http.routers.pleroma.rule=Host(`pleroma.local`)
      # - traefik.http.routers.pleroma.middlewares=https_redirect
      - traefik.http.routers.pleromas.entryPoints=https
      - traefik.http.routers.pleromas.rule=Host(`pleroma.local`)
      - traefik.http.routers.pleromas.tls=true
    restart: unless-stopped
    depends_on:
      - postgres_pleroma
    # ports: ['5000:4000']
    volumes:
        # - ./pleroma_config.exs:/pleroma/config/prod.secret.exs
        - pleroma_uploads:/pleroma/uploads
        - ./infra/dev/pleroma/config.exs:/var/lib/pleroma/config.exs
      # - ./pleroma/custom.d:/custom.d:ro
      # - ./pleroma/config/dev.secret.exs:/home/pleroma/pleroma/config/prod.secret.exs:ro
      # - ./pleroma/config/dev.secret.exs:/home/pleroma/pleroma/config/dev.secret.exs:ro
      # - ./pleroma/uploads:/uploads
      # - ./pleroma/_build:/_build

  traefik:
    image: traefik:v2.2.0
    # Expose these ports to directly access all containers on your public interface (e.g. useful on macOS)
    # ports:
    #   - 80:80
    #   - 443:443

    # command: --web --docker --docker.domain=local --logLevel=DEBUG
    command:
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --entrypoints.http.forwardedHeaders.insecure
      - --entrypoints.https.forwardedHeaders.insecure
      # - --entrypoints.http.http.redirections.entryPoint.to=https
      # - --entrypoints.http.http.redirections.entryPoint.scheme=https
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --api.insecure
      - --providers.file.filename=/config/traefik.yaml
    # hostname: pleroma.local
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./infra/dev/traefik/traefik.yaml:/config/traefik.yaml
      - ./infra/dev/traefik/certs:/certs
      # - /dev/null:/traefik.toml
    networks:
      default:
        aliases:
          - pleroma.local
          - element.local
          - kazarma.local
          - kazarma.kazarma.local
          - matrix.kazarma.local


  postgres_kazarma:
    image: postgres:15-alpine
    domainname: postgres_kazarma
    labels:
      - traefik.enable=false
    environment:
      - POSTGRES_USER=kazarma
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_kazarma_files:/var/lib/postgresql/data

  postgres_pleroma:
    image: postgres:15-alpine
    domainname: postgres_pleroma
    labels:
      - traefik.enable=false
    # init: true
    # restart: unless-stopped
    environment:
      - POSTGRES_USER=pleroma
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_pleroma_files:/var/lib/postgresql/data
      # - ./pleroma/initdb.sql:/docker-entrypoint-initdb.d/pleroma.sql

  # postgres_synapse:
  #   # image: docker.io/postgres:10-alpine
  #   image: postgres:15-alpine
  #   domainname: postgres_synapse
  #   labels:
  #     - traefik.enable=false
  #   environment:
  #     - POSTGRES_USER=synapse
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
  #   volumes:
  #     - postgres_synapse_files:/var/lib/postgresql/data
